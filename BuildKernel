Do these git commands only if after doing step6 it generates dirty.opk :
make distclean
make clean
make mrproper
git pull

export ARCH=arm 
export CROSS_COMPILE=*/arm-none-linux-gnueabi-
To generate kernel opk
1.	make -j4 $ARCH $CROSS_COMPILE *_defconfig
It will generate the config file, modify config file :
1.	Vim .config

2.	uname –r on target to get kernel release version and then modify the .config file as mentioned below.
+ CONFIG_LOCALVERSION="-04317-g32fb2e5"
+ CONFIG_LOCALVERSION_AUTO=n
3.	vim scripts/setlocalversion
+ # echo "+"
2.	make -j4 $ARCH $CROSS_COMPILE menuconfig
define zip format for uImage(gzip,lzzp etc..), you can change/add/modify any configuration which was different than default config, ex: Drivers, file systems, 
Power management settings etc...

3.	make -j4  $ARCH $CROSS_COMPILE LOADADDR=0x10008000 uImage
Will create uImage: path will be mentioned if its success
uImage --> zImage file with the U-Boot wrapper.
zImage --> self-extracting, compressed Image, does not require the LOADADDR

4.	make -j4 $ARCH $CROSS_COMPILE modules
will create modules
5.	make -j4 $ARCH $CROSS_COMPILE dtbs
will create dtbs

Installation can be of different mode from HostPC connecting USB/OTG to IMX board, from SDCARD or over network, copying some opkg files etc...

If target panics:
1.	Check if uname –r[3.14.61-04317-g32fb2e5] name is same as what is in /lib/modules on target : if its different do below steps:
1.	After generating modules as above : create package of it 

make -j8 $ARCH $CROSS_COMPILE INSTALL_MOD_STRIP=1 modules_install INSTALL_MOD_PATH=~/temp

The 3.14.61-04317-g32fb2e5eb should be generated in ~/temp/lib/modules/ on Ubuntu
Copy it on target at /lib/modules/
reboot
2.	If still reboot :
Copy module as above
Copy uImage

3.	If still reboot check if module is taken as older version as on target u have 2 versions now, then should remove older version in /lib/modules/ and keep only one “eb” in /lib/modules/ on target and do the step2 again.  


Debug kernel panics:
https://www.collabora.com/news-and-blog/blog/2016/06/10/linux-kernel-memory-corruption-debug-tricks/



